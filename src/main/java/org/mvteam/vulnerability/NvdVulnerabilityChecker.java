package org.mvteam.vulnerability;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.mvteam.exception.VulnerabilityCheckException;
import org.mvteam.model.Dependency;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class NvdVulnerabilityChecker {

    // TODO: Fix the output of messages, add a little style so that all messages do not turn into mush and are clearer
    // TODO: Add more comments in the code, because it's not fucking clear from the word at all
    // TODO: Fix this or delete this (void main / example)
    // TODO: Check the API for newer methods

    private static final String NVD_API = "https://services.nvd.nist.gov/rest/json/v2.0/vulnerabilities";
    // for retards 10 requests per 1 minute
    // 1 minute = 6000 ms
    private static final int REQUEST_DELAY_MS = 6000; // ~10 req/min
    private static final ObjectMapper mapper = new ObjectMapper();
    private static final OkHttpClient client = new OkHttpClient();

    public static List<Dependency> check(List<Dependency> dependencies, String apiKey) {
        List<Dependency> vulnerableDeps = new ArrayList<>();

        for (Dependency dep : dependencies) {
            try {
                String query = buildQuery(dep);
                Request request = buildRequest(query, apiKey);
                Response response = client.newCall(request).execute();

                if (!response.isSuccessful()) {
                    handleErrorResponse(response.code(), dep);
                    continue;
                }

                if (response.body() == null) {
                    System.err.println(" Empty response for: " + dep);
                    continue;
                }

                JsonNode root = mapper.readTree(response.body().string());
                List<String> vulns = extractVulnerabilities(root);

                if (!vulns.isEmpty()) {
                    dep.vulnerabilities = vulns;
                    vulnerableDeps.add(dep);
                }

                if (dependencies.size() > 1) {
                    Thread.sleep(REQUEST_DELAY_MS);
                }

            } catch (IOException | InterruptedException e) { // TODO: fix this shit
                System.err.println(" Network error checking " + dep + ": " + e.getMessage());
            }
        }

        return vulnerableDeps;
    }

    private static String buildQuery(Dependency dep) {
        return "?keywordSearch=" + dep.groupId + "+" + dep.artifactId;
    }

    private static Request buildRequest(String query, String apiKey) {
        Request.Builder builder = new Request.Builder()
                .url(NVD_API + query);

        if (apiKey != null && !apiKey.isEmpty()) {
            builder.addHeader("apiKey", apiKey); // shit
        }

        return builder.build();
    }

    private static void handleErrorResponse(int code, Dependency dep) {
        if (code == 403) {
            System.err.println(" NVD API rate limit exceeded. Use API key or wait.");
        } else if (code == 404) {
            System.err.println(" No vulnerabilities found for: " + dep);
        } else {
            System.err.println(" NVD API error (code " + code + ") for: " + dep);
        }
    }

    private static List<String> extractVulnerabilities(JsonNode root) throws IOException {
        List<String> vulnerabilities = new ArrayList<>();

        if (root.has("vulnerabilities")) {
            for (JsonNode vulnNode : root.get("vulnerabilities")) {
                if (vulnNode.has("cve") && vulnNode.get("cve").has("descriptions")) {
                    for (JsonNode descNode : vulnNode.get("cve").get("descriptions")) {
                        if (descNode.has("value")) {
                            vulnerabilities.add(descNode.get("value").asText());
                            break;
                        }
                    }
                }
            }
        }

        return vulnerabilities;
    }

    // Example
    public static void main(String[] args) {
        List<Dependency> dependencies = new ArrayList<>();
        dependencies.add(new Dependency("junit", "junit", "4.12"));
        dependencies.add(new Dependency("org.apache.commons", "commons-lang3", "3.5"));

        String apiKey = ""; // API KEY FROM NVD
        List<Dependency> vulnerableDeps = check(dependencies, apiKey);

        System.out.println("⚠️ Found vulnerabilities:");
        for (Dependency dep : vulnerableDeps) {
            System.out.println(" - " + dep);
            for (String vuln : dep.vulnerabilities) {
                System.out.println("   → " + vuln);
            }
        }
    }
}